{"version":3,"file":"static/webpack/static\\development\\pages\\editor.js.a57d8760ab5cefbe315d.hot-update.js","sources":["webpack:///./pages/editor.js"],"sourcesContent":["import React from 'react';\r\nimport bulmaCalendar from 'bulma-calendar/dist/js/bulma-calendar.min.js';\r\nimport 'bulma/css/bulma.css';\r\nimport 'bulma-calendar/dist/css/bulma-calendar.min.css';\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\nconst weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\nexport default class Editor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {date:\"\"}\r\n        this.type=\"\";\r\n        this.message=[];\r\n        this.date=\"default\";\r\n        this.activities=[];\r\n        this.edit=false;\r\n        this.changeType=this.changeType.bind(this);\r\n        this.changeDate = this.changeDate.bind(this);\r\n        this.fetchDate=this.fetchDate.bind(this);\r\n        this.addActivity=this.addActivity.bind(this);\r\n        this.changeTitle=this.changeTitle.bind(this);\r\n        this.save=this.save.bind(this);\r\n        this.calendars = null;\r\n    }\r\n    componentDidMount(){\r\n        this.calendars = bulmaCalendar.attach('[type=\"date\"]');\r\n    }\r\n    typeSwitch(){\r\n        switch(this.type){\r\n            case \"weekDay\":\r\n                this.date=weekDays[0];\r\n                return(\r\n                    <div className=\"select\">\r\n                        <select name=\"type\" id=\"type\" onChange={this.changeDate}>\r\n                            {weekDays.map((day,index)=>{\r\n                                return(<option key={index} value={`${day}`}>{day}</option>);\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                )\r\n            case \"Date\":\r\n                return(\r\n                    <div style={{display:\"inline-block\"}}>\r\n                        <input className=\"input\" type=\"date\" name=\"date\" id=\"date\" value={this.date} onChange={this.changeDate}/>\r\n                    </div>\r\n                )\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    save(){\r\n        fetch(`http://localhost:3000/editor/${this.date}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                activities:this.activities,\r\n                date:this.date\r\n            })\r\n        }).then(res=>{\r\n            res.json().then(\r\n                res=>{\r\n                    console.log(res.message);\r\n                    \r\n                    this.message.splice(0, 0,res.message);\r\n                    console.log(this.message)\r\n                    this.setState({date:new Date()})\r\n                    setTimeout(()=>{\r\n                        this.message.pop();\r\n                    })\r\n                }\r\n            )\r\n        })\r\n    }\r\n  \r\n    changeType(event){\r\n        this.type = event.target.value;\r\n        if(this.type==\"default\"){\r\n            this.changeDate(event)\r\n        }\r\n        this.setState({type:event.target.value});\r\n    }   \r\n    changeDate(event){\r\n        this.date=event.target.value;\r\n        this.activities=[];\r\n        this.edit=false;\r\n        this.setState({\r\n            date: this.date\r\n        })\r\n    }\r\n    fetchDate(){\r\n        fetch(`http://localhost:3000/editor/${this.date}`)\r\n        .then(res => {\r\n            res.json()\r\n            .then(res => {\r\n                this.activities = res.activities;\r\n                this.edit=true;\r\n                this.setState({\r\n                    date: this.date\r\n                })\r\n            })\r\n        });\r\n        \r\n    }\r\n    changeTitle(index, event) {\r\n        this.activities[index].title = event.target.value;\r\n        this.setState({\r\n            date: new Date()\r\n        })\r\n    }\r\n    changeTime(index,event){\r\n        let splitDate;\r\n        console.log(event.target.attributes[\"name\"])\r\n        switch(event.target.attributes[\"name\"].value){\r\n            case \"startHour\":\r\n                splitDate = this.activities[index].startTime.split(\":\")\r\n                splitDate[0]=event.target.value;\r\n                this.activities[index].startTime = splitDate.join(\":\")\r\n                break;\r\n            case \"startMinute\":\r\n                splitDate = this.activities[index].startTime.split(\":\")\r\n                splitDate[1] = event.target.value;\r\n                this.activities[index].startTime = splitDate.join(\":\")\r\n                break;\r\n            case \"finishHour\":\r\n                splitDate = this.activities[index].finishTime.split(\":\")\r\n                splitDate[0] = event.target.value;\r\n                this.activities[index].finishTime = splitDate.join(\":\")\r\n                break;\r\n            case \"finishMinute\":\r\n                splitDate = this.activities[index].finishTime.split(\":\")\r\n                splitDate[1] = event.target.value;\r\n                this.activities[index].finishTime=splitDate.join(\":\")\r\n                break;\r\n        }\r\n        this.setState({\r\n            date: event.target.value\r\n        })\r\n    }\r\n    addActivity(){\r\n        this.activities.push({title:\"title\",startTime:\"00:00\",finishTime:\"00:00\"});\r\n        this.setState({\r\n            date: new Date()\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        var switchRender = this.typeSwitch();\r\n        return(\r\n            <div>\r\n                <div style={{position:\"absolute\",right:\"0\",display:\"inline-block\",maxWidth:\"50%\"}}>\r\n                   {this.message.map((message,index)=>{\r\n                        return(\r\n                            <div key={index} style={{zIndex:\"100\"}} className=\"notification is-primary\">\r\n                                {message}\r\n                            </div>\r\n                        )\r\n                   })}\r\n                   \r\n                </div>\r\n                <div className=\"select\">\r\n                    <select className=\"select is-info\" name=\"type\" id=\"type\" onChange={this.changeType}>\r\n                        <option value=\"default\">Default</option>\r\n                        <option value=\"weekDay\">Week Day</option>\r\n                        <option value=\"Date\">Date</option>\r\n                    </select>\r\n                </div>\r\n                {this.typeSwitch()}\r\n                <a className=\"button is-info\" onClick={this.fetchDate}>\r\n                Edit\r\n                </a>\r\n                <br/>\r\n                {this.activities.map((activity,index)=>{\r\n                    let splitStartDate = activity.startTime.split(':');\r\n                    let splitFinishDate = activity.finishTime.split(':');\r\n                    return(\r\n                        <div key={index} className=\"card\" style={{display:\"inline-block\",margin:\"10px\"}} >\r\n                        title:<br/>\r\n                        <div style={{display:\"inline-block\"}}><input className=\"input\" type=\"text\" value={activity.title} onChange={(e)=>this.changeTitle(index,e)}/></div><br/>\r\n                        start time:<br/>\r\n                        <div style={{display:\"inline-block\"}}><input className=\"input\" type=\"number\" min=\"00\" max=\"23\" name=\"startHour\" value={splitStartDate[0]} onChange={(e)=>this.changeTime(index,e)}/></div> \r\n                        : \r\n                        <div style={{display:\"inline-block\"}}><input className=\"input\" type=\"number\" min=\"00\" max=\"59\" gap=\"1\" name=\"startMinute\" value={splitStartDate[1]}  onChange={(e)=>this.changeTime(index,e)}/></div><br/>\r\n                        finish time:<br></br>\r\n                        <div style={{display:\"inline-block\"}}><input className=\"input\" type=\"number\" min=\"00\" max=\"23\" name=\"finishHour\" value={splitFinishDate[0]} onChange={(e)=>this.changeTime(index,e)}/></div>\r\n                        : \r\n                        <div style={{display:\"inline-block\"}}><input className=\"input\" type=\"number\" min=\"00\" max=\"59\" gap=\"1\" name=\"finishMinute\" value={splitFinishDate[1]}  onChange={(e)=>this.changeTime(index,e)}/></div><br/>\r\n                        <br/>\r\n                        <button onClick={(index)=>{this.activities.splice(index,1);this.setState({date:new Date()})}} className=\"button is-danger\">Delete</button>                        \r\n                        </div>)\r\n                    })}\r\n                    {this.edit?<div><a className=\"button is-info\" onClick={this.addActivity}>Add activity</a><a className=\"button is-success\" onClick={this.save}>Save</a></div>:\"\"}\r\n            </div>\r\n        )\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAeA;AACA;;;AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AApBA;AAsBA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AANA;AAWA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;;;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAEA;;;AACA;AACA;AACA;AACA;AADA;AAGA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AApBA;AACA;AAqBA;AACA;AADA;AAGA;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AA9LA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}