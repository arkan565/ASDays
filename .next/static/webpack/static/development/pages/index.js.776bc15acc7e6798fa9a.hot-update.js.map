{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.776bc15acc7e6798fa9a.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from 'react';\r\nimport 'bulma/css/bulma.css';\r\nimport LeftPanel from '../components/leftPanel';\r\nimport ActiveActivities from '../components/activeActivities'\r\nimport fetch from 'isomorphic-unfetch';\r\nexport default class Index extends React.Component{\r\n    static async getInitialProps() { //choose beetween production host or development host\r\n        const res = await fetch(`http://localhost:3000/day`);\r\n        let day = await res.json();\r\n        const res2 = await fetch(`http://localhost:3000/config`);\r\n        const config = await res2.json();\r\n        //day.activities= day.activities.filter(days=>days.startTime>`${config.startTime.value}:00`);\r\n        //day.activities = day.activities.filter(days => days.startTime < `${config.finishTime.value}:00`);\r\n        return {\r\n            day,config\r\n        }\r\n    }\r\n    constructor(props) {\r\n        super(props)\r\n        this.nextActivities=[];\r\n        this.state = {\r\n            width: 0,\r\n            height: 0\r\n        }\r\n        this.active=[]\r\n        this.day={\r\n\r\n        }\r\n        this.config={\r\n\r\n        }\r\n        this.timeout=null;\r\n    }\r\n    componentDidMount() {\r\n        window.addEventListener('resize', () => {\r\n            this.setState({\r\n                width: window.innerWidth,\r\n                height: window.innerHeight\r\n            });\r\n        });\r\n    }\r\n    orderActivities(day){\r\n        let activities=[];\r\n        const length=day.activities.length;\r\n        for (let i = 0; i < length;i++){\r\n            let minI = 0;\r\n            let minStartTime = day.activities[0].startTime;\r\n            let minFinishTime = day.activities[0].finishTime;\r\n            for (let j = 1; j < day.activities.length; j++) {\r\n                if (day.activities[j].startTime<minStartTime) {\r\n                    minI=j;\r\n                    minStartTime = day.activities[j].startTime;\r\n                    minFinishTime = day.activities[j].finishTime;\r\n                } else if (day.activities[j].startTime == minStartTime && day.activities[j].finishTime < minFinishTime){\r\n                     minI = j;\r\n                     minStartTime = day.activities[j].startTime;\r\n                     minFinishTime = day.activities[j].finishTime;\r\n                }\r\n            }\r\n            activities.push(day.activities[minI]);\r\n            day.activities.splice(minI,1);\r\n        }\r\n        return activities;\r\n    }\r\n    setActive() {\r\n        let date = new Date();\r\n        this.props.day.activities.forEach(activity => {\r\n            let splitStartDate = activity.startTime.split(':');\r\n            let startHour = parseInt(splitStartDate[0], 10);\r\n            let startMinute = parseInt(splitStartDate[1], 10);\r\n            let splitFinishDate = activity.finishTime.split(':');\r\n            let finishHour = parseInt(splitFinishDate[0], 10);\r\n            let finishMinute = parseInt(splitFinishDate[1], 10);\r\n            if ((startHour < date.getHours()) || (startHour == date.getHours() && startMinute <= date.getMinutes())){\r\n                activity.active =(finishHour > date.getHours() || activity.finishTime === \"00:00\" || (finishHour==date.getHours() && finishMinute>date.getMinutes())); //set if active is good or bad\r\n            }else{\r\n                activity.active=false;\r\n            }\r\n        });\r\n        this.active = this.props.day.activities.filter(activity => activity.active == true);\r\n    }\r\n    getNext(activities){\r\n        let next= [];\r\n        let date = new Date();\r\n        activities.map((activity)=>{\r\n            let splitStartDate = activity.startTime.split(':');\r\n            let startHour = parseInt(splitStartDate[0], 10);\r\n            if(startHour>=date.getHours() && !activity.active && next.length<3){\r\n                next.push(activity)\r\n            }\r\n        })\r\n        this.nextActivities=next;\r\n    }\r\n    setTimeout(){\r\n        let minTime= -1;\r\n        let date = new Date();\r\n        for (let i = 0; i < this.active.length; i++) {\r\n            let activity=this.active[i];\r\n            let splitFinishDate = activity.finishTime.split(':');\r\n            let finishHour = parseInt(splitFinishDate[0], 10);\r\n            let finishMinutes = parseInt(splitFinishDate[1], 10);\r\n            let secondsLeft= 60-date.getSeconds()+1;\r\n            let minutes = (finishMinutes != 0 ? finishMinutes - date.getMinutes()-1 : 60 - date.getMinutes()-1);\r\n            let hours = (finishHour!=0?finishHour-date.getHours()-1:24-date.getHours()-1);\r\n            if(hours<0){\r\n                hours=0;\r\n            }\r\n            if(minutes<0){\r\n                minutes=0;  \r\n            }\r\n            let timeleft = (3600*1000*hours)+(60*1000*minutes)+(secondsLeft*1000);\r\n            if(minTime==-1 || timeleft<minTime){\r\n                minTime=timeleft;\r\n            }\r\n        }\r\n        for(let i=0;i<this.nextActivities.length;i++){\r\n            let activity=this.nextActivities[i];\r\n            let splitStartDate = activity.startTime.split(':');\r\n            let startHour = parseInt(splitStartDate[0], 10);\r\n            let startMinute = parseInt(splitStartDate[1], 10);\r\n            let secondsLeft = 60 - date.getSeconds() + 1;\r\n            let minutes = (startMinute != 0 ? startMinute - date.getMinutes() - 1 : 60 - date.getMinutes() - 1);\r\n            let hours = (startHour != 0 ? startHour - date.getHours() - 1 : 24 - date.getHours() - 1);\r\n            if (hours < 0) {\r\n                hours = 0;\r\n            }\r\n            if (minutes < 0) {\r\n                minutes = 0;\r\n            }\r\n            let timeleft = (3600 * 1000 * hours) + (60 * 1000 * minutes) + (secondsLeft * 1000);\r\n            if (minTime == -1 || timeleft < minTime) {\r\n                minTime = timeleft;\r\n            }\r\n        }\r\n        try {\r\n            clearTimeout(this.timeout)\r\n        } catch (ex) {\r\n\r\n        }\r\n        if(minTime!=-1){\r\n            this.timeout = setTimeout(() => this.setState({\r\n                time: Date.now()\r\n            }), minTime);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        this.props.day.activities = this.orderActivities(this.props.day);\r\n        this.setActive();\r\n        this.getNext(this.props.day.activities);\r\n        this.setTimeout();\r\n        if(this.props.config.layout.background){\r\n            this.style = {body:{background:this.props.config.layout.background}}\r\n        }else{\r\n            this.style = {}\r\n        }\r\n        console.log(this.style);\r\n        return(\r\n            <div className=\"container\">\r\n                <style jsx global>\r\n                {`\r\n                    ${this.style}\r\n                `}\r\n                </style>\r\n                <title>Day Panel</title>\r\n                <div style={{marginBottom:\"5vh\",textAlign:\"center\"}}>\r\n                    <h1 className=\"title is-1\">Schedule</h1>\r\n                </div> \r\n                <div className=\"columns\">\r\n                    <div className = \"column is-one-third\" >\r\n                        <LeftPanel config={this.props.config} activities={this.props.day.activities?this.props.day.activities:\"\"}></LeftPanel>\r\n                    </div>\r\n                    <div className = \"column is-two-thirds\">\r\n                        <div style={this.state.width>800?{position:\"fixed\",width:\"60vw\"}:{}}>\r\n                            <ActiveActivities config={this.props.config} active={this.active} next={this.nextActivities}></ActiveActivities>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;AAEA;AACA;;AADA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AAGA;AACA;AAAA;AADA;AACA;;;;;;;;;;;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AAGA;AAdA;AAeA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAAA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;;;;AA/KA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}